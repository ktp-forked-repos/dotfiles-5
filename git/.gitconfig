[filter "lfs"]
    smudge = git-lfs smudge %f
    required = true
    clean = git-lfs clean %f
[alias]
    # ---- patch/unpatch a commit
    # -> 'git show $1 -p' doesn't work with stashes so we use diff here
    patch = "!f(){ git diff $1^ $1 | git apply; }; f"
    unpatch = "!f(){ git diff $1^ $1 | git apply --reverse; }; f"
    stack = "!f(){ git diff HEAD...$1 | git apply; }; f"
    # ---- reset current branch to the last commit we've checked out
    undo = "!f() { git reset $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
    # ---- compare two branches excluding commits from other branches
    compare = "!f() { git diff ${1:-master}...${2:-HEAD}; }; f"
    history = "!f() { git log ${1:-master}..${2:-HEAD}; }; f"
    # ---- push and pull in one shot
    sync = "!f(){ local branch=${1-$(git symbolic-ref --short HEAD)}; git pull origin $branch --ff-only && git push origin $branch; }; f"
    publish = "!f(){ git push origin ${1-$(git symbolic-ref --short HEAD)}; }; f"
    # ---- prepare worktree for review
    review = "!f() { git fetch; git checkout -b review ${2:-$(git merge-base origin/master origin/$1)}; git stack origin/$1; git add -N .; }; f"
    # ---- delete old local branches
    clean-branch = "!f() { git branch -d $(git branch --merged ${1:-master} | grep -v \"*\\|${1:-master}\"); }; f"
    # ---- stash lists
    stash-list = "!f() { git-stash-list $*; }; f"
    # ---- fix typos
    chekcout = checkout
    hcekcout = checkout
    hceckout = checkout
    checkotu = checkout
    stauts = status
    stahs = stash
    hisotry = "!f() { git log ${1:-master}..${2:-HEAD}; }; f"
[merge]
    # conflictStyle = diff3
[diff]
    algorithm = patience
    compactionHeuristic = true
[color]
    ui = auto
[pager]
    log = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less
